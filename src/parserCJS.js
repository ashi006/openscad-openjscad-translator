const ext = require('./openscad-parser-ext')
const ArgContainer = require('./ArgContainer')
const ArgsContainer = require('./ArgsContainer')
const Expression = require('./Expression')
const ModuleInstantiation = require('./ModuleInstantiation')
const IfElseModuleInstantiation = require('./IfElseModuleInstantiation')
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9,10,15,16,21,22,26,30,31,32,33],$V1=[10,15,16,21,22,26,30,31,32,33],$V2=[2,7],$V3=[1,5],$V4=[1,20],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[1,9,10,15,16,17,21,22,26,30,31,32,33],$Va=[9,10,15,16,17,21,22,26,30,31,32,33],$Vb=[1,24],$Vc=[1,30],$Vd=[1,29],$Ve=[1,43],$Vf=[1,50],$Vg=[1,49],$Vh=[1,40],$Vi=[1,41],$Vj=[1,42],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[14,56],$Vq=[2,69],$Vr=[1,54],$Vs=[10,17,26,30,31,32,33],$Vt=[10,15,16,26,30,31,32,33],$Vu=[2,64],$Vv=[1,60],$Vw=[1,65],$Vx=[1,63],$Vy=[1,62],$Vz=[1,77],$VA=[1,64],$VB=[1,66],$VC=[1,67],$VD=[1,68],$VE=[1,69],$VF=[1,70],$VG=[1,71],$VH=[1,72],$VI=[1,73],$VJ=[1,74],$VK=[1,75],$VL=[1,76],$VM=[14,15,32,33,37,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56],$VN=[2,32],$VO=[1,78],$VP=[2,61],$VQ=[1,82],$VR=[1,88],$VS=[1,95],$VT=[42,56],$VU=[10,11,14,30,34,35,36,38,39,40,42,45,46],$VV=[14,15,41,42,45,46,47,48,49,50,51,52,53,54,55,56],$VW=[14,15,32,33,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56],$VX=[14,15,41,42,47,48,51,52,53,54,55,56],$VY=[14,15,41,42,47,48,49,50,51,52,53,54,55,56],$VZ=[2,60];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"input":4,"statement":5,"inner_input":6,"statement_begin":7,"statement_end":8,"TOK_MODULE":9,"TOK_ID":10,"(":11,"arguments_decl":12,"optional_commas":13,")":14,";":15,"{":16,"}":17,"module_instantiation":18,"=":19,"expr":20,"TOK_FUNCTION":21,"BR":22,"children_instantiation":23,"module_instantiation_list":24,"if_statement":25,"TOK_IF":26,"ifelse_statement":27,"single_module_instantiation":28,"arguments_call":29,"!":30,"#":31,"%":32,"*":33,"TOK_TRUE":34,"TOK_FALSE":35,"TOK_UNDEF":36,".":37,"TOK_STRING":38,"TOK_NUMBER":39,"[":40,":":41,"]":42,"vector_expr":43,"/":44,"+":45,"-":46,"<":47,"LE":48,"EQ":49,"NE":50,"GE":51,">":52,"AND":53,"OR":54,"?":55,",":56,"argument_decl":57,"argument_call":58,"$accept":0,"$end":1},
terminals_: {2:"error",9:"TOK_MODULE",10:"TOK_ID",11:"(",14:")",15:";",16:"{",17:"}",19:"=",21:"TOK_FUNCTION",22:"BR",26:"TOK_IF",30:"!",31:"#",32:"%",33:"*",34:"TOK_TRUE",35:"TOK_FALSE",36:"TOK_UNDEF",37:".",38:"TOK_STRING",39:"TOK_NUMBER",40:"[",41:":",42:"]",44:"/",45:"+",46:"-",47:"<",48:"LE",49:"EQ",50:"NE",51:"GE",52:">",53:"AND",54:"OR",55:"?",56:","},
productions_: [0,[3,1],[4,0],[4,2],[6,0],[6,2],[5,2],[7,0],[7,6],[8,1],[8,3],[8,1],[8,4],[8,9],[8,1],[23,1],[23,3],[25,5],[27,1],[18,2],[18,2],[18,1],[24,0],[24,2],[28,4],[28,2],[28,2],[28,2],[28,2],[20,1],[20,1],[20,1],[20,1],[20,3],[20,1],[20,1],[20,5],[20,7],[20,3],[20,4],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,2],[20,2],[20,3],[20,5],[20,4],[20,4],[13,2],[13,0],[43,1],[43,4],[12,0],[12,1],[12,4],[57,1],[57,3],[29,0],[29,1],[29,4],[58,1],[58,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            return ext.processModule(yy);
        
break;
case 8:

            ext.stashModule($$[$0-4], $$[$0-2].argnames, $$[$0-2].argexpr);
            delete $$[$0-2];
        
break;
case 9:

        
break;
case 10:

            ext.popModule();
        
break;
case 11:

            ext.addModuleChild($$[$0]);
        
break;
case 12:

            ext.addModuleAssignmentVar($$[$0-3], $$[$0-1]);
        
break;
case 13:

            ext.addModuleFunction($$[$0-7], $$[$0-1], $$[$0-5].argnames, $$[$0-5].argexpr);
            delete $$[$0-5];
        
break;
case 15:

            this.$ = new ModuleInstantiation();
            if ($$[$0]) {
                this.$.children.push($$[$0]);
            }
        
break;
case 16: case 19:

            this.$ = $$[$0-1];
        
break;
case 17:

            this.$ = new IfElseModuleInstantiation();
            this.$.argnames.push("");
            this.$.argexpr.push($$[$0-2]);

            if (this.$) {
                this.$.children = $$[$0].children;
            } else {
                for (var i = 0; i < $$[$0].children.size(); i++)
                    delete $$[$0].children[i];
            }
            delete $$[$0];
        
break;
case 18: case 21: case 53:

            this.$ = $$[$0];
        
break;
case 20:

            this.$ = $$[$0-1];
            if (this.$) {
                this.$.children = $$[$0].children;
            } else {
                for (var i = 0; i < $$[$0].children.length; i++)
                delete $$[$0].children[i];
            }
            delete $$[$0];
        
break;
case 22:

            this.$ = new ModuleInstantiation();
        
break;
case 23:

            this.$ = $$[$0-1];
            if (this.$) {
                if ($$[$0]) {
                    this.$.children.push($$[$0]);
                }
            } else {
                delete $$[$0];
            }
        
break;
case 24:

            this.$ = new ModuleInstantiation();
            this.$.name = $$[$0-3];
            this.$.argnames = $$[$0-1].argnames;
            this.$.argexpr = $$[$0-1].argexpr;
            delete $$[$0-1];
        
break;
case 25:

            this.$ = $$[$0];
            if (this.$) {
                this.$.tag_root = true;
            }
        
break;
case 26:

            this.$ = $$[$0];
            if (this.$) {
                this.$.tag_highlight = true;
            }
        
break;
case 27:

            /* - NOTE: Currently unimplemented, therefore not displaying parts marked with %
                this.$ = $$[$0];
                if (this.$) {
                    this.$.tag_background = true;
                }
            */
            delete $$[$0];
            this.$ = undefined;
        
break;
case 28:

            delete $$[$0];
            this.$ = undefined;
        
break;
case 29:

            this.$ = new Expression(true);
        
break;
case 30:

            this.$ = new Expression(false);
        
break;
case 31:

            this.$ = new Expression(undefined);
        
break;
case 32:

            this.$ = new Expression();
            this.$.type = "L";
            this.$.var_name = $$[$0];
        
break;
case 33:

            this.$ = new Expression();
            this.$.type = "N";
            this.$.children.push($$[$0-2]);
            this.$.var_name = $$[$0];
        
break;
case 34:

            this.$ = new Expression(String($$[$0]));
        
break;
case 35:

            this.$ = new Expression(Number($$[$0]));
        
break;
case 36:

            var e_one = new Expression(1.0);
            this.$ = new Expression();
            this.$.type = "R";
            this.$.children.push($$[$0-3]);
            this.$.children.push(e_one);
            this.$.children.push($$[$0-1]);
        
break;
case 37:

            this.$ = new Expression();
            this.$.type = "R";
            this.$.children.push($$[$0-5]);
            this.$.children.push($$[$0-3]);
            this.$.children.push($$[$0-1]);
        
break;
case 38:

            this.$ = new Expression([]);
        
break;
case 39:

            this.$ = $$[$0-2];
        
break;
case 40:

            this.$ = new Expression();
            this.$.type = '*';
            this.$.children.push($$[$0-2]);
            this.$.children.push($$[$0]);
        
break;
case 41:

            this.$ = new Expression();
            this.$.type = '/';
            this.$.children.push($$[$0-2]);
            this.$.children.push($$[$0]);
        
break;
case 42:

            this.$ = new Expression();
            this.$.type = '%';
            this.$.children.push($$[$0-2]);
            this.$.children.push($$[$0]);
        
break;
case 43:

            this.$ = new Expression();
            this.$.type = '+';
            this.$.children.push($$[$0-2]);
            this.$.children.push($$[$0]);
        
break;
case 44:

            this.$ = new Expression();
            this.$.type = '-';
            this.$.children.push($$[$0-2]);
            this.$.children.push($$[$0]);
        
break;
case 45:

            this.$ = new Expression();
            this.$.type = '<';
            this.$.children.push($$[$0-2]);
            this.$.children.push($$[$0]);
        
break;
case 46:

            this.$ = new Expression();
            this.$.type = '<=';
            this.$.children.push($$[$0-2]);
            this.$.children.push($$[$0]);
        
break;
case 47:

            this.$ = new Expression();
            this.$.type = '==';
            this.$.children.push($$[$0-2]);
            this.$.children.push($$[$0]);
        
break;
case 48:

            this.$ = new Expression();
            this.$.type = '!=';
            this.$.children.push($$[$0-2]);
            this.$.children.push($$[$0]);
        
break;
case 49:

            this.$ = new Expression();
            this.$.type = '>=';
            this.$.children.push($$[$0-2]);
            this.$.children.push($$[$0]);
        
break;
case 50:

            this.$ = new Expression();
            this.$.type = '>';
            this.$.children.push($$[$0-2]);
            this.$.children.push($$[$0]);
        
break;
case 51:

            this.$ = new Expression();
            this.$.type = '&&';
            this.$.children.push($$[$0-2]);
            this.$.children.push($$[$0]);
        
break;
case 52:

            this.$ = new Expression();
            this.$.type = '||';
            this.$.children.push($$[$0-2]);
            this.$.children.push($$[$0]);
        
break;
case 54:

            this.$ = new Expression();
            this.$.type = 'I';
            this.$.children.push($$[$0]);
        
break;
case 55:

            this.$ = new Expression();
            this.$.type = '!';
            this.$.children.push($$[$0]);
        
break;
case 56:
 this.$ = $$[$0-1]; 
break;
case 57:

            this.$ = new Expression();
            this.$.type = '?:';
            this.$.children.push($$[$0-4]);
            this.$.children.push($$[$0-2]);
            this.$.children.push($$[$0]);
        
break;
case 58:

            this.$ = new Expression();
            this.$.type = '[]';
            this.$.children.push($$[$0-3]);
            this.$.children.push($$[$0-1]);
        
break;
case 59:

            this.$ = new Expression();
            this.$.type = 'F';
            this.$.call_funcname = $$[$0-3];
            this.$.call_argnames = $$[$0-1].argnames;
            this.$.children = $$[$0-1].argexpr;
            delete $$[$0-1];
        
break;
case 62:

            this.$ = new Expression();
            this.$.type = 'V';
            this.$.children.push($$[$0]);
        
break;
case 63:

            this.$ = $$[$0-3];
            this.$.children.push($$[$0]);
        
break;
case 64: case 69:

            this.$ = new ArgsContainer();
        
break;
case 65: case 70:

            this.$ = new ArgsContainer();
            this.$.argnames.push($$[$0].argname);
            this.$.argexpr.push($$[$0].argexpr);
            delete $$[$0];
        
break;
case 66: case 71:

            this.$ = $$[$0-3];
            this.$.argnames.push($$[$0].argname);
            this.$.argexpr.push($$[$0].argexpr);
            delete $$[$0];
        
break;
case 67:

            this.$ = new ArgContainer();
            this.$.argname = $$[$0];
            this.$.argexpr = undefined;
        
break;
case 68: case 73:

            this.$ = new ArgContainer();
            this.$.argname = $$[$0-2];
            this.$.argexpr = $$[$0];
        
break;
case 72:

            this.$ = new ArgContainer();
            this.$.argexpr = $$[$0];
        
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},o($V1,$V2,{5:3,7:4,1:[2,1],9:$V3}),o($V0,[2,3]),{8:6,10:[1,10],15:[1,7],16:[1,8],18:9,21:[1,11],22:[1,12],25:19,26:$V4,27:14,28:13,30:$V5,31:$V6,32:$V7,33:$V8},{10:[1,21]},o($V9,[2,6]),o($V9,[2,9]),o($Va,[2,4],{6:22}),o($V9,[2,11]),{11:$Vb,19:[1,23]},{10:[1,25]},o($V9,[2,14]),{10:$Vc,15:[1,26],16:$Vd,18:28,23:27,25:19,26:$V4,27:14,28:13,30:$V5,31:$V6,32:$V7,33:$V8},o($V9,[2,21]),{10:$Vc,28:31,30:$V5,31:$V6,32:$V7,33:$V8},{10:$Vc,28:32,30:$V5,31:$V6,32:$V7,33:$V8},{10:$Vc,28:33,30:$V5,31:$V6,32:$V7,33:$V8},{10:$Vc,28:34,30:$V5,31:$V6,32:$V7,33:$V8},o($V9,[2,18]),{11:[1,35]},{11:[1,36]},o($V1,$V2,{7:4,5:38,9:$V3,17:[1,37]}),{10:$Ve,11:$Vf,20:39,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},o($Vp,$Vq,{29:51,58:52,20:53,10:$Vr,11:$Vf,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo}),{11:[1,55]},o($V9,[2,19]),o($V9,[2,20]),o($V9,[2,15]),o($Vs,[2,22],{24:56}),{11:$Vb},o($Vt,[2,25]),o($Vt,[2,26]),o($Vt,[2,27]),o($Vt,[2,28]),{10:$Ve,11:$Vf,20:57,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},o($Vp,$Vu,{12:58,57:59,10:$Vv}),o($V9,[2,10]),o($Va,[2,5]),{15:[1,61],32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL},o($VM,[2,29]),o($VM,[2,30]),o($VM,[2,31]),o($VM,$VN,{11:$VO}),o($VM,[2,34]),o($VM,[2,35]),{10:$Ve,11:$Vf,13:80,20:79,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,42:$VP,43:81,45:$Vn,46:$Vo,56:$VQ},{10:$Ve,11:$Vf,20:83,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:84,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:85,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:86,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{14:[1,87],56:$VR},o($Vp,[2,70]),o($Vp,[2,72],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL}),o([14,32,33,37,40,44,45,46,47,48,49,50,51,52,53,54,55,56],$VN,{11:$VO,19:[1,89]}),o($Vp,$Vu,{57:59,12:90,10:$Vv}),{10:$Vc,17:[1,91],18:92,25:19,26:$V4,27:14,28:13,30:$V5,31:$V6,32:$V7,33:$V8},{14:[1,93],32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL},{13:94,14:$VP,56:$VS},o($Vp,[2,65]),o($Vp,[2,67],{19:[1,96]}),o($V9,[2,12]),{10:[1,97]},{10:$Ve,11:$Vf,20:98,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:99,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:100,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:101,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:102,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:103,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:104,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:105,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:106,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:107,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:108,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:109,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:110,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:111,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{10:$Ve,11:$Vf,20:112,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},o($Vp,$Vq,{58:52,20:53,29:113,10:$Vr,11:$Vf,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo}),o($VT,[2,62],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,41:[1,114],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL}),{42:[1,115]},{13:116,42:$VP,56:[1,117]},o($VU,$VP,{13:118,56:$VQ}),o($VV,[2,53],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA}),o($VV,[2,54],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA}),o($VV,[2,55],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA}),{14:[1,119],32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL},o($Vt,[2,24]),o([10,11,30,34,35,36,38,39,40,45,46],$VP,{13:120,56:$VQ}),{10:$Ve,11:$Vf,20:121,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{13:122,14:$VP,56:$VS},o($V9,[2,16]),o($Vs,[2,23]),{10:$Vc,16:$Vd,18:28,23:123,25:19,26:$V4,27:14,28:13,30:$V5,31:$V6,32:$V7,33:$V8},{14:[1,124]},o([10,14],$VP,{13:125,56:$VQ}),{10:$Ve,11:$Vf,20:126,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},o($VM,[2,33]),o($VW,[2,40],{37:$Vy,40:$Vz}),o($VW,[2,41],{37:$Vy,40:$Vz}),o($VW,[2,42],{37:$Vy,40:$Vz}),o($VV,[2,43],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA}),o($VV,[2,44],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA}),o($VX,[2,45],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,49:$VF,50:$VG}),o($VX,[2,46],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,49:$VF,50:$VG}),o($VY,[2,47],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC}),o($VY,[2,48],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC}),o($VX,[2,49],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,49:$VF,50:$VG}),o($VX,[2,50],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,49:$VF,50:$VG}),o([14,15,41,42,53,54,55,56],[2,51],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI}),o([14,15,41,42,54,55,56],[2,52],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI,53:$VJ}),{32:$Vw,33:$Vx,37:$Vy,40:$Vz,41:[1,127],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL},{32:$Vw,33:$Vx,37:$Vy,40:$Vz,42:[1,128],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL},{14:[1,129],56:$VR},{10:$Ve,11:$Vf,20:130,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},o($VM,[2,38]),{42:[1,131]},o([10,11,30,34,35,36,38,39,40,42,45,46],$VP,{13:132,56:$VQ}),o($VU,$VZ),o($VM,[2,56]),{10:$Vr,11:$Vf,20:53,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo,58:133},o($Vp,[2,73],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL}),{14:[1,134]},o($V9,[2,17]),o($V1,[2,8]),{10:$Vv,14:$VZ,57:135},o($Vp,[2,68],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL}),{10:$Ve,11:$Vf,20:136,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},o($VM,[2,58]),o($VM,[2,59]),{32:$Vw,33:$Vx,37:$Vy,40:$Vz,41:[1,138],42:[1,137],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL},o($VM,[2,39]),{10:$Ve,11:$Vf,20:139,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,42:$VZ,45:$Vn,46:$Vo},o($Vp,[2,71]),{19:[1,140]},o($Vp,[2,66]),o([14,15,41,42,56],[2,57],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL}),o($VM,[2,36]),{10:$Ve,11:$Vf,20:141,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},o($VT,[2,63],{32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL}),{10:$Ve,11:$Vf,20:142,30:$Vg,34:$Vh,35:$Vi,36:$Vj,38:$Vk,39:$Vl,40:$Vm,45:$Vn,46:$Vo},{32:$Vw,33:$Vx,37:$Vy,40:$Vz,42:[1,143],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL},{15:[1,144],32:$Vw,33:$Vx,37:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,50:$VG,51:$VH,52:$VI,53:$VJ,54:$VK,55:$VL},o($VM,[2,37]),o($V9,[2,13])],
defaultActions: {},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin('cond_include'); 
break;
case 1: yy.filepath = yy_.yytext; 
break;
case 2: yy.filename = yy_.yytext; 
break;
case 3:  this.popState(); 
break;
case 4: this.begin('cond_use');
break;
case 5: yy.filename = yy_.yytext; 
break;
case 6: this.popState(); 
break;
case 7:return 9
break;
case 8:return 21
break;
case 9:return 26
break;
case 10:return 'TOK_ELSE'
break;
case 11:return 34
break;
case 12:return 35
break;
case 13:return 36
break;
case 14: stringcontents += '    ';  
break;
case 15: stringcontents += '\n';  
break;
case 16: stringcontents += '\"';  
break;
case 17: stringcontents += '\r';  
break;
case 18: stringcontents += '\\';  
break;
case 19: stringcontents += '\0';  
break;
case 20: stringcontents += '\a';  
break;
case 21: stringcontents += '\b';  
break;
case 22: stringcontents += '\t';  
break;
case 23: stringcontents += '\n';  
break;
case 24: stringcontents += '\v';  
break;
case 25: stringcontents += '\f';  
break;
case 26: stringcontents += '\e';  
break;
case 27: /*"*/
                                stringcontents += yy_.yytext;
                            
break;
case 28:
                                this.popState();
                                yy_.yytext = stringcontents;
                                return 38;
                            
break;
case 29: /*"*/
                                this.begin('cond_string');
                                stringcontents = "";
                            
break;
case 30:/* Ignore */
break;
case 31:/* Ignore */
break;
case 32:/* Ignore */
break;
case 33:/* Ignore Note: multi-line comments are removed via a preparse regex. */
break;
case 34:return 39
break;
case 35:return 39
break;
case 36:return 39
break;
case 37:return 10
break;
case 38:return 48
break;
case 39:return 51
break;
case 40:return 49
break;
case 41:return 50
break;
case 42:return 53
break;
case 43:return 54
break;
case 44:return yy_.yytext;
break;
case 45:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:include[ \t\r\n>]*<)/,/^(?:[^\t\r\n>]*\/)/,/^(?:[^\t\r\n>\/]+)/,/^(?:>)/,/^(?:use[ \t\r\n>]*<)/,/^(?:[^\t\r\n>]+)/,/^(?:>)/,/^(?:module)/,/^(?:function)/,/^(?:if)/,/^(?:else)/,/^(?:true)/,/^(?:false)/,/^(?:undef)/,/^(?:\\t)/,/^(?:\\n)/,/^(?:\\")/,/^(?:\\r)/,/^(?:\\\\)/,/^(?:\\0)/,/^(?:\\a)/,/^(?:\\b)/,/^(?:\\t)/,/^(?:\\n)/,/^(?:\\v)/,/^(?:\\f)/,/^(?:\\e)/,/^(?:[^\\\n\"]+)/,/^(?:")/,/^(?:[\"])/,/^(?:[\n])/,/^(?:[\r\t ])/,/^(?:\/\/[^\n]*\n?)/,/^(?:\/\*.+\*\/)/,/^(?:([0-9])*\.([0-9])+([Ee][+-]?([0-9])+)?)/,/^(?:([0-9])+\.([0-9])*([Ee][+-]?([0-9])+)?)/,/^(?:([0-9])+([Ee][+-]?([0-9])+)?)/,/^(?:\$?[a-zA-Z0-9_]+)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:.)/,/^(?:.)/],
conditions: {"cond_include":{"rules":[0,1,2,3,4,7,8,9,10,11,12,13,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true},"cond_use":{"rules":[0,4,5,6,7,8,9,10,11,12,13,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true},"cond_comment":{"rules":[0,4,7,8,9,10,11,12,13,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true},"cond_string":{"rules":[0,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true},"cond_import":{"rules":[0,4,7,8,9,10,11,12,13,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true},"INITIAL":{"rules":[0,4,7,8,9,10,11,12,13,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}